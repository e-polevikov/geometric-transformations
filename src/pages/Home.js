import { Link } from 'react-router-dom';

import styles from './Home.module.css'

import level1Target from '../images/level1-target.png';
import level2Target from '../images/level2-target.png';
import level3Target from '../images/level3-target.png';

import initial from '../images/initial.png';
import shifted from '../images/shifted.png';

import reflected from '../images/reflected.png';
import rotated from '../images/rotated.png';
import reflected2 from '../images/reflected2.png';
import hullExample from '../images/hull-example.png';

export function Home() {
  return (
    <div className={styles['homepage']}>
      <h1 style={{textAlign: "center"}}>Задача «Геометрические преобразования»</h1>

      <ul>
        <li><Link to="/geometric-transformations/level-1">Уровень 1</Link></li>
        <li><Link to="/geometric-transformations/level-2">Уровень 2</Link></li>
        <li><Link to="/geometric-transformations/level-3">Уровень 3</Link></li>
      </ul>

      <h2>Описание</h2>

      <p>С объектами на плоскости можно осуществлять различные преобразования. Одно из самых простых и естественных преобразований — параллельный перенос. Ниже приведен пример такого преобразования.</p>

      <div className={styles['container']}>
        <figure>
            <img
              className={styles['image']}
              src={initial}
              alt="Параллельный перенос. Начальное положение."
            />
            <figcaption>Начальное положение.</figcaption>
        </figure>
        <figure>
            <img
              className={styles['image']}
              src={shifted}
              alt="Параллельный перенос. После преобразования."
            />
            <figcaption>Фигура после применения параллельного переноса.</figcaption>
        </figure>
      </div>

      <p>Примеры других преобразований — это осевая симметрия и поворот на угол относительно точки.</p>

      <div className={styles['container']}>
        <figure>
            <img
              className={styles['image']}
              src={reflected}
              alt="Осевая симметрия относительно прямой DE"
            />
            <figcaption>Осевая симметрия относительно прямой DE.</figcaption>
        </figure>
        <figure>
            <img
              className={styles['image']}
              src={rotated}
              alt="Поворот на угол ABC относительно точки B (против часовой стрелки)"
            />
            <figcaption>Поворот на угол ABC относительно точки B <br></br> (против часовой стрелки).</figcaption>
        </figure>
      </div>

      <p>Оказывается, что параллельный перенос можно представить в виде последовательности осевых симметрий или поворотов, или же как последовательность, в которой используются оба типа упомянутых преобразований.</p>

      <div className={styles['container']}>
        <figure>
            <img
              className={styles['image']}
              src={reflected}
              alt="Осевая симметрия относительно прямой DE. Шаг 1."
            />
            <figcaption>Осевая симметрия относительно прямой DE. Шаг 1.</figcaption>
        </figure>
        <figure>
            <img
              className={styles['image']}
              src={reflected2}
              alt="Осевая симметрия относительно прямой DE. Шаг 2."
            />
            <figcaption>Осевая симметрия относительно прямой DE. Шаг 2.</figcaption>
        </figure>
      </div>

      <h3>Формулировка задачи</h3>

      <p>Участнику доступны два типа преобразований — осевая симметрия и поворот на угол относительно точки (по часовой стрелке и против часовой стрелки). Задача участника — построить требуемую конфигурацию фигур используя эти два типа преобразований. Для 1-го уровня необходимо получить прямоугольник. Для 2-го и 3-го уровней — квадрат. Ниже приведены примеры ожидаемых результатов для каждого уровня.</p>

      <div className={styles['images-container']}>
        <figure>
          <img
            className={styles['image']}
            src={level1Target}
            alt="Уровень 1. Прямоугольник из двух фигур."
          />
          <figcaption>Уровень 1. Прямоугольник из двух фигур.</figcaption>
        </figure>

        <figure>
          <img
            className={styles['image']}
            src={level2Target}
            alt="Уровень 2. Квадрат из трех фигур."
          />
          <figcaption>Уровень 2. Квадрат из трех фигур.</figcaption>
        </figure>

        <figure>
          <img
            className={styles['image']}
            src={level3Target}
            alt="Уровень 3. Квадрат из четырех фигур."
          />
          <figcaption>Уровень 3. Квадрат из четырех фигур.</figcaption>
        </figure>
      </div>

      Обратите внимание, что преобразования, в результате которых фигура полностью оказывается за пределами плоскости, не допускаются. Фигура может частично выходить за пределы плоскости, но необходимо, чтобы хотя бы одна из вершин фигур была внутри плоскости.

      <h3>Критерии оценки решения</h3>

      <p><b>1-й критерий</b> — похожесть фигур на требуемую. Обозначается как <b>S</b>. Критерий может принимать значения от 0 до 100. Значение <b>S</b> максимально тогда, когда фигуры не пересекаются, а их объединение дает ожидаемую конфигурацию.</p>
      
      <p>Вычисляется критерий следующим образом. Сначала рассматривается объединение вершин всех фигур, и для этих вершин строится выпуклая оболочка. Для найденной выпуклой оболочки вычисляется площадь. Ниже приведен пример выпуклой оболочки для двух фигур (показана черным пунктиром).</p>

      <div className={styles['container']}>
        <figure>
            <img
              className={styles['image']}
              src={hullExample}
              alt="Пример выпуклой оболочки для двух фигур."
            />
            <figcaption>Пример выпуклой оболочки для двух фигур.</figcaption>
        </figure>
      </div>

      <p>Площадь данной выпуклой оболочки равна 11.</p>

      <p>Затем рассматривается фигура, которая является объединением всех фигур, но при этом области пересечения фигур исключаются. Для объединения фигур также вычисляется площадь. Для примера выше такая площадь равна 8.</p>
      
      <p>Далее вычисляется отношение площади объединения фигур к площади выпуклой оболочки. Вычисленная переменная может принимать значения от 0 до 1. Для примера выше такое отношение равно 8/11.</p>

      <p>Если фигуры не пересекаются, то к вычисленному выше значению прибавляется ещё одно значение, которое равно отношению периметра ожидаемой фигуры к периметру выпуклой оболочки. Это значение максимально, когда фигуры образуют требуемую конфигурацию. Для примера выше такое отношение равно 12 / (11 + &#8730;5).</p>

      <p>Сумма описанных выше значений далее умножается на 50, чтобы получилось значение от 0 до 100. Таким образом, для примера выше <b>S</b> = 50 (8/11 + 12 / (11 + &#8730;5)) = 81.694.</p>

      <p><b>2-й критерий</b> — сумма длин путей, пройденных центрами фигур. Обозначается как <b>L</b>. Центр каждой из фигур отмечен черным кругом. В качестве центра берется центроид — точка, где каждая координата является средним арифметическим соответствующих координат вершин фигуры.</p>

      <p><b>3-й критерий</b> — суммарная стоимость преобразований. Обозначается как <b>C</b>. Стоимость осевой симметрии равняется двум, поворота — трем.</p>

      <p>Обратите внимание, что критерии имею приоритет. Критерий с наибольшим приоритетом — это похожесть (<b>S</b>), затем идет сумма длин путей (<b>L</b>), а затем суммарная стоимость преобразований (<b>C</b>). То есть участникам стоит стремиться в первую очередь к тому, чтобы получить требуемую конфигурацию фигур. Затем пытаться уменьшить суммарную длину пути, а потом — стоимость операций.</p>
    </div>
  );
};
